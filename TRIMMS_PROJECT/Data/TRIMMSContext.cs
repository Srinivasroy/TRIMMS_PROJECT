// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using TRIMMS_PROJECT.Models;

namespace TRIMMS_PROJECT.Data
{
    public partial class TRIMMSContext : DbContext
    {
        public TRIMMSContext()
        {
        }

        public TRIMMSContext(DbContextOptions<TRIMMSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Allocation> Allocations { get; set; }
        public virtual DbSet<AllocationType> AllocationTypes { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientGroup> ClientGroups { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<L0Table> L0Tables { get; set; }
        public virtual DbSet<L1Table> L1Tables { get; set; }
        public virtual DbSet<L2Table> L2Tables { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Models.Task> Tasks { get; set; }
        public virtual DbSet<Timesheet> Timesheets { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Allocation>(entity =>
            {
                entity.HasKey(e => e.ResourceId);

                entity.ToTable("Allocation");

                entity.Property(e => e.ResourceId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Resource_ID");

                entity.Property(e => e.Allocation1)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Allocation%");

                entity.Property(e => e.AllocationTypeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AllocationType_ID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.AllocationType)
                    .WithMany(p => p.Allocations)
                    .HasForeignKey(d => d.AllocationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Allocation_AllocationType");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Allocations)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Allocation_Project");
            });

            modelBuilder.Entity<AllocationType>(entity =>
            {
                entity.HasKey(e => e.AllocId);

                entity.ToTable("AllocationType");

                entity.Property(e => e.AllocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Alloc_ID");

                entity.Property(e => e.AllocationType1)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Allocation_Type");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.ToTable("Client");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Client_ID");

                entity.Property(e => e.ClientGroupId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ClientGroup_ID");

                entity.Property(e => e.ClientName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Client_Name");

                entity.Property(e => e.LocationId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Location_ID");

                entity.HasOne(d => d.ClientGroup)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.ClientGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_ClientGroup1");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Location");
            });

            modelBuilder.Entity<ClientGroup>(entity =>
            {
                entity.ToTable("ClientGroup");

                entity.Property(e => e.ClientGroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ClientGroup_ID");

                entity.Property(e => e.ClientGroupName)
                    .IsUnicode(false)
                    .HasColumnName("ClientGroup_Name");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country");

                entity.Property(e => e.CountryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Country_ID");

                entity.Property(e => e.CountryName)
                    .IsUnicode(false)
                    .HasColumnName("Country_Name");

                entity.Property(e => e.RegionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Region_ID");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Countries)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_Country_Region");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("Currency");

                entity.Property(e => e.CurrencyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Currency_ID");

                entity.Property(e => e.CountryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Country_ID");

                entity.Property(e => e.CurrencySymbol)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Currency_Symbol");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Currencies)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Currency_Country");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => e.EmpId);

                entity.ToTable("Employee");

                entity.Property(e => e.EmpId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Emp_ID");

                entity.Property(e => e.Band)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Doj)
                    .HasColumnType("date")
                    .HasColumnName("DOJ");

                entity.Property(e => e.EmailId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Email_ID");

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Emp_Name");

                entity.Property(e => e.Level)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Lwd)
                    .HasColumnType("date")
                    .HasColumnName("LWD");

                entity.Property(e => e.RmEmpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RM_Emp_ID");

                entity.Property(e => e.VerticalL2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Vertical(L2)");

                entity.HasOne(d => d.Emp)
                    .WithOne(p => p.Employee)
                    .HasForeignKey<Employee>(d => d.EmpId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_Allocation");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_Location");

                entity.HasOne(d => d.VerticalL2Navigation)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.VerticalL2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_L2_Table");
            });

            modelBuilder.Entity<Holiday>(entity =>
            {
                entity.ToTable("Holiday");

                entity.Property(e => e.HolidayId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Holiday_ID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.LocationId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Location_ID");

                entity.Property(e => e.Occasion)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.StateId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("State_ID");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Holidays)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Holiday_Location");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.Holidays)
                    .HasForeignKey(d => d.StateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Holiday_State");
            });

            modelBuilder.Entity<L0Table>(entity =>
            {
                entity.HasKey(e => e.DivisonL0Id);

                entity.ToTable("L0_Table");

                entity.Property(e => e.DivisonL0Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DivisonL0_ID");

                entity.Property(e => e.DivisonL0Title)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("DivisonL0_Title");
            });

            modelBuilder.Entity<L1Table>(entity =>
            {
                entity.HasKey(e => e.DivisonL1Id);

                entity.ToTable("L1_Table");

                entity.Property(e => e.DivisonL1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DivisonL1_ID");

                entity.Property(e => e.DivisonL0Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DivisonL0_ID");

                entity.Property(e => e.DivisonL1Title)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("DivisonL1_Title");

                entity.HasOne(d => d.DivisonL0)
                    .WithMany(p => p.L1Tables)
                    .HasForeignKey(d => d.DivisonL0Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_L1_Table_L0_Table");
            });

            modelBuilder.Entity<L2Table>(entity =>
            {
                entity.HasKey(e => e.DivisonL2Id);

                entity.ToTable("L2_Table");

                entity.Property(e => e.DivisonL2Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DivisonL2_ID");

                entity.Property(e => e.DivisonL1Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DivisonL1_ID");

                entity.Property(e => e.DivisonL2Title)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("DivisonL2_Title");

                entity.HasOne(d => d.DivisonL1)
                    .WithMany(p => p.L2Tables)
                    .HasForeignKey(d => d.DivisonL1Id)
                    .HasConstraintName("FK_L2_Table_L1_Table");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.ToTable("Location");

                entity.Property(e => e.LocationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Location_ID");

                entity.Property(e => e.LocationName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Location_Name");

                entity.Property(e => e.StateId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("State_ID");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.StateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Location_State");
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.Property(e => e.ModuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Module_ID");

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Project_ID");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Modules)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Modules_Project");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.ToTable("Project");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Client_ID");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.EngagementType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Msa)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("MSA");

                entity.Property(e => e.Po)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("PO");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.RefCode)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Sow)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("SOW");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Project_Client");

                entity.HasOne(d => d.EngagementTypeNavigation)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.EngagementType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Project_ProjectType");
            });

            modelBuilder.Entity<ProjectType>(entity =>
            {
                entity.ToTable("ProjectType");

                entity.Property(e => e.ProjectTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProjectType_ID");

                entity.Property(e => e.ProjectType1)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("ProjectType");
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.ToTable("Region");

                entity.Property(e => e.RegionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Region_ID");

                entity.Property(e => e.RegionName)
                    .IsUnicode(false)
                    .HasColumnName("Region_Name");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role");

                entity.Property(e => e.RoleId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Role_ID");

                entity.Property(e => e.BillingRate).HasColumnType("money");

                entity.Property(e => e.BillingType)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Currency_ID");

                entity.Property(e => e.OverTimeRate)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OverTimeUnit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.RoleTitle)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Role_Title");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Roles)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Role_Currency");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Roles)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Role_Project");
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.ToTable("State");

                entity.Property(e => e.StateId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("State_ID");

                entity.Property(e => e.CountryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Country_ID");

                entity.Property(e => e.StateName)
                    .IsUnicode(false)
                    .HasColumnName("State_Name");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.States)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_State_Country");
            });

            modelBuilder.Entity<Models.Task>(entity =>
            {
                entity.ToTable("Task");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Task_ID");

                entity.Property(e => e.TaskAssignmentType)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Task_Assignment_Type");

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Task_Name");
            });

            modelBuilder.Entity<Timesheet>(entity =>
            {
                entity.HasKey(e => e.TsId);

                entity.Property(e => e.TsId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TS_ID");

                entity.Property(e => e.Billable)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("Billable?");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.EmpId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Emp_ID");

                entity.Property(e => e.ModuleId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Module_ID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Task_ID");

                entity.Property(e => e.YyyyMmDdMonday)
                    .HasColumnType("date")
                    .HasColumnName("YYYY-MM-DD_Monday");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.Timesheets)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Timesheets_Modules");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.Timesheets)
                    .HasForeignKey(d => d.TaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Timesheets_Task");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}